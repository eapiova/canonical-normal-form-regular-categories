(** A closure sytem is given by a family of rules, from which we inductively generate
    elements, starting from a set of elements. *)

Require Import Auxiliary.Family.

(* A rule on [X] gives a family of "premises" and a "conclusion", so it is a kind of
   abstract inference rule. *)
Local Record rule (X : Type) :=
  {
    rule_premises : family X ;
    rule_conclusion : X
  }.

Arguments rule_premises [_] _.
Arguments rule_conclusion [_] _.

(** Map a rule in [X] to a rule in [Y] along a map [f : X -> Y]. *)
Local Definition fmap {X Y} (f : X -> Y) : rule X -> rule Y.
Proof.
  intros [ps c].
  exact {| rule_premises := Family.fmap f ps ; rule_conclusion := f c |}.
Defined.

(* A closure system is a family of rules. *)
Definition system (X : Type) := family (rule X).

(** Derivations generated by the given family of rules [C] and hypotheses [H].  *)
Local Inductive derivation {X} (C : system X) (H : family X) : X -> Type :=
  | hypothesis : forall (i : H), derivation C H (H i)
  | deduce (r : C) :
      (forall (p : rule_premises (C r)), derivation C H (rule_premises (C r) p)) ->
      derivation C H (rule_conclusion (C r)).

(** Given a derivation [d] from hypotheses [H], and for each hypothesis [h] a derivation
    of it from hypotheses [G], we can graft the derivations onto [d] to get a derivation
    from hypotheses [G]. *)
Local Definition graft {X} (C : system X)
    {H} {x} (d : derivation C H x)
    {G} (f : forall i : H, derivation C G (H i))
  : derivation C G x.
Proof.
  induction d.
  (* hypothesis *)
  - now apply f.
  (* deduction step *)
  - now apply (deduce _ _ r).
Defined.

(** A map from a closure system [C] to a closure system [D] gives, for each rule [C i] in
    [C i] in [C], a derivation in [D] of the conclusion of [C i] from the premises of [C i]. *)
Local Definition map {X} (C D : system X) : Type
  := forall i : C, derivation D (rule_premises (C i)) (rule_conclusion (C i)).

(** We can of always map a closure system to itself by deducing the
    conclusion of every rule by simply applying the rule. *)
Local Definition idmap {X} (C : system X) : map C C.
Proof.
  intro i.
  apply deduce.
  intro p.
  now apply hypothesis.
Defined.

(* If we know how to map the closure system [C] to the closure system [D],
   then we can map any derivation in [C] to a derivation in [D]. *)
Local Fixpoint map_derivation {X} {C D : system X} (f : map C D) {H} {x} (d : derivation C H x) :
  derivation D H x.
Proof.
  destruct d.
  - now apply hypothesis.
  - apply (@graft X D (rule_premises (C r))).
    + now apply f.
    + intro i.
      now apply (map_derivation _ C _ f).
Defined.
