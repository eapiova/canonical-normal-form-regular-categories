Require Import Auxiliary.Family.
Require Import Proto.ShapeSystem.
Require Import Raw.Syntax.
Require Import Raw.RawStructuralRule.
Require Import Raw.FlatRule.

Section FlatTypeTheory.

  Context {σ : shape_system}.

  (** A flat type theory is just a family of flat rules. *)
  Definition flat_type_theory (Σ : signature σ) : Type
     := family (flat_rule Σ).

  (** The closure system generated by structural rules and the flat type theory [T]. *)
  Local Definition closure_system {Σ : signature σ} (T : flat_type_theory Σ)
    : Closure.system (judgement_total Σ)
    := structural_rule Σ + Family.bind T FlatRule.closure_system.

  (** A derivation of a total judgement in the given flat type theory [T] from
      hypothesis [H], with structural rules included. *)
  Local Definition derivation {Σ : signature σ} (T : flat_type_theory Σ) H
    : judgement_total Σ -> Type
    := Closure.derivation (closure_system T) H.

End FlatTypeTheory.

Local Definition fmap {σ : shape_system}
      {Σ Σ' : signature σ} (f : Signature.map Σ Σ')
  : flat_type_theory Σ -> flat_type_theory Σ'.
Proof.
  apply Family.fmap, FlatRule.fmap, f.
Defined.

Section FlatTypeTheoryDerivation.
  Context {σ : shape_system}.
  Context {Σ : signature σ}.

  (** For each presupposition of the given judgement boundary [jbi], a derivation
    of the presupposition in flat type theory [T] from hypotheses [H]. *)
  Local Definition presupposition_derivation
        (T : flat_type_theory Σ)
        {jf} (jbi : Judgement.boundary Σ jf)
        (H : family (judgement_total Σ))
    : Type
    :=
      forall (i : presupposition_of_boundary jbi),
        derivation T H (presupposition_of_boundary _ i).

  (** The derivation of the conclusion of rule [R] from its premises
    in flat type theroy [T], with given hypotheses. *)
  Local Definition flat_rule_derivation
        (R : flat_rule Σ) (T : flat_type_theory Σ)
    : Type.
  Proof.
    simple refine (Closure.derivation _ (flat_rule_premises _ R) (flat_rule_conclusion _ R)).
    apply closure_system.
    simple refine (fmap _ T).
    apply Family.inl. (* TODO: make this a lemma about signature maps,
                            so it’s more findable using “SearchAbout” etc *)
  Defined.

  (** Instantiate derivation [d] with metavariable instantiation [I]. *)
  Local Definition instantiate_derivation
             (T : flat_type_theory Σ)
             {Γ : raw_context Σ} {a : arity σ} (I : Metavariable.instantiation a Σ Γ)
             {hyps : family _} (j : judgement_total (Metavariable.extend Σ a))
             (d : derivation (fmap include_symbol T) hyps j)
    : derivation T (Family.fmap (Metavariable.instantiate_judgement I) hyps)
                   (Metavariable.instantiate_judgement I j).
  Proof.
  Admitted.


End FlatTypeTheoryDerivation.